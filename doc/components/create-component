# createComponent

在上一章我们分析 `createElement` 的实现的时候，它最终会调用 `_createElement` 方法，其中有一段逻辑是对参数 `tag` 的判断，如果是一个普通的 html 标签，像上一章的例子那样是一个普通的 div，则会实例化一个普通 VNode 节点，否则通过 `createComponent` 方法创建一个组件 VNode；在我们这一章节，传入的是一个 App 对象，它本质上是一个 Component 类型，关于该类型的定义，在 `flow/component.js` 文件中，所以接下来我们来看一下 `createComponent` 方法的实现，它定义在 `src/core/vdom/create-component.js` 文件中。

```js
export function createComponent (
  Ctor: Class<Component> | Function | Object | void,
  data: ?VNodeData,
  context: Component,
  children: ?Array<VNode>,
  tag?: string
): VNode | void {
  if (isUndef(Ctor)) {
    return
  }

  // baseCtor 在这里就是 Vue
  const baseCtor = context.$options._base

  // 普通对象会通过 Vue.extend 继承 Vue，变成组件的构造函数
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor)
  }

  // 如果不是一个函数构造器，则组件的定义是不合法的
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(`Invalid Component definition: ${String(Ctor)}`, context)
    }
    return
  }

  // 异步组件
  let asyncFactory
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context)
    if (Ctor === undefined) {
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {}

  // 解析构造函数的 options 避免全局 Mixin 在组件构造器创建后应用
  resolveConstructorOptions(Ctor)

  // 把组件中的 v-model 数据转换成 props 和 events 的形式
  if (isDef(data.model)) {
    transformModel(Ctor.options, data)
  }

  // 提取 props 数据
  const propsData = extractPropsFromVNodeData(data, Ctor, tag)

  // 函数组件
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // 提取 v-on 绑定的自定义事件
  const listeners = data.on
  
  // 把带有 .native 修饰符的原生事件替换到 data.on 上，当父组件 patch 的时候会处理
  data.on = data.nativeOn

  if (isTrue(Ctor.options.abstract)) {
    // 抽象组件只保留 propsData、listeners 和 slot
    const slot = data.slot
    data = {}
    if (slot) {
      data.slot = slot
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data)

  // return a placeholder vnode
  const name = Ctor.options.name || tag
  const vnode = new VNode(
    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,
    data, undefined, undefined, undefined, context,
    { Ctor, propsData, listeners, tag, children },
    asyncFactory
  )
  return vnode
}
```

可以看到，`createComponent` 的逻辑也会有一些复杂，但是分析源码比较推荐的是只分析核心流程，分支流程可以之后针对性的看，所以这里针对组件渲染这个 case 主要就 3 个关键步骤：

- 构造函数

我们在编写一个组件的时候，通常都是创建一个普通对象，还是以我们的 App.vue 为例，代码如下：

```js
import HelloWorld from './components/HelloWorld'

export default {
  name: 'app',
  components: {
    HelloWorld
  }
}
```
这里 export 的是一个对象，所以 `createComponent` 里的代码逻辑会执行到 `baseCtor.extend(Ctor)`，在这里 `baseCtor` 实际上就是 Vue，这个的定义是在最开始初始化 Vue 的阶段，在 `src/core/global-api/index.js` 中的 `initGlobalAPI` 函数有这么一段逻辑：

```js
Vue.options._base = Vue
```
细心的同学会发现，这里定义的是 `Vue.option`，而我们的 `createComponent` 取的是 `context.$options`，实际上在 `src/core/instance/init.js` 里的 `Vue.propertype._init` 函数中有这么一段逻辑：

```js
 vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      )
```

这样就把 Vue 上的一些 option 扩展到了 vm.$option 上，所以我们也就能通过 `vm.$options._base` 拿到 Vue 这个构造函数了。

在了解了 `baseCtor` 指向了 Vue 之后，我们来看一下 `Vue.extend` 函数的定义，在 `src/core/global-api/extend.js` 中。

```js
// 经典继承
Vue.extend = function (extendOptions: Object): Function {
    extendOptions = extendOptions || {}
    const Super = this
    const SuperId = Super.cid
    const cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {})
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    // 组件名称
    const name = extendOptions.name || Super.options.name
    if (process.env.NODE_ENV !== 'production') {
      // 对组件名称做校验
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'can only contain alphanumeric characters and the hyphen, ' +
          'and must start with a letter.'
        )
      }
    }

    const Sub = function VueComponent (options) {
      // 执行 Vue 的 _init 方法初始化
      this._init(options)
    }
    // 原型继承
    Sub.prototype = Object.create(Super.prototype)
    Sub.prototype.constructor = Sub
    // 自增计数
    Sub.cid = cid++
    // 扩展 option
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    )
    Sub['super'] = Super

    // props 和 computed 在 Vue.extend 阶段通过定义 proxy 的 getters 在它们的原型上，这样就可以避免每一次实例化组件的时候都调用一次 Object.defineProperty
    if (Sub.options.props) {
      initProps(Sub)
    }
    if (Sub.options.computed) {
      initComputed(Sub)
    }

    // 保留对父类静态方法的引用
    Sub.extend = Super.extend
    Sub.mixin = Super.mixin
    Sub.use = Super.use

    // 继承的组件也能拥有注册 component、directive 以及 filter 的能力，为这些组件私有。
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type]
    })
    // 允许递归自查找
    if (name) {
      Sub.options.components[name] = Sub
    }

    // 保留父类 options 的引用，在实例化的过程中我们可以检查父类的 options 是否更新
    Sub.superOptions = Super.options
    Sub.extendOptions = extendOptions
    Sub.sealedOptions = extend({}, Sub.options)

    // 缓存构造函数
    cachedCtors[SuperId] = Sub
    return Sub
  }
```

我们通过分析 Vue.extend

